Command bytes:
's' Temperatursensor lesen -> parse_float(string("%3.2f")) + \r\n
'T' Temperatursoll setzen <- string (int(float(temp)*16))
't' Temperatursoll lesen -> parse_float(string("%3.2f")) + \r\n
'P' P-Wert setzen <- string (uint16_t x * 1024)
'p' Alle PID Werte ausgeben -> string (uint16_t)  + \r\n
'I' I-Wert setzen <- string (uint16_t x * 1024)
'i' Alle PID Werte ausgeben -> string (uint16_t)  + \r\n
'D' D-Wert setzen <- string (uint16_t x * 1024)
'd' Alle PID Werte ausgeben -> string (uint16_t p / 1024, i / 1024,  d / 1024)  + \r\n
'A' Pumpe on
'a' Pumpe off
'B' Deckelheizung on
'b' Deckelheizung off
'L' Toggle LED (Debug)
'l' Toggle LED by using queuing system (Debug)
'R' Reset (Alle Register zurücksetzen und neu initialisieren)
'-' Lösche gesetzte Temperaturkurve
'+' Füge einen Punkt zur Temperaturkurve hinzu. erwartet Zieltemperatur und zeit (in10tel sekunden) für wie lange die temperatur gehalten werden soll bevor zur nächsten gesprungen wird. <- string(int(float(temp)*16)) \n <- string(int(seconds*10)) \n
'Z' setzte Anzahl Zyklen in denen die Temperaturkurve wiederholt wird (0 == default == keine Wiederholung == 1 Zyklus, 1 == 1 Wiederholung == 2 Zyklen) <- string(int(repeats))
'm' Schalte ständige Ausgabe der aktuellen Temperatur ein/aus

Nach jedem Setz-Command: Bestätigung mit "OK\r\n" (oder so)
'
